// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/schuhlisa/provider-databricks/apis/compute/v1alpha1"
	v1alpha11 "github.com/schuhlisa/provider-databricks/apis/sql/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this SQLTable.
func (mg *SQLTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClusterIDRef,
		Selector:     mg.Spec.ForProvider.ClusterIDSelector,
		To: reference.To{
			List:    &v1alpha1.ClusterList{},
			Managed: &v1alpha1.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterID")
	}
	mg.Spec.ForProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WarehouseID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.WarehouseIDRef,
		Selector:     mg.Spec.ForProvider.WarehouseIDSelector,
		To: reference.To{
			List:    &v1alpha11.SQLEndpointList{},
			Managed: &v1alpha11.SQLEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.WarehouseID")
	}
	mg.Spec.ForProvider.WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.WarehouseIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ClusterIDRef,
		Selector:     mg.Spec.InitProvider.ClusterIDSelector,
		To: reference.To{
			List:    &v1alpha1.ClusterList{},
			Managed: &v1alpha1.Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterID")
	}
	mg.Spec.InitProvider.ClusterID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WarehouseID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.WarehouseIDRef,
		Selector:     mg.Spec.InitProvider.WarehouseIDSelector,
		To: reference.To{
			List:    &v1alpha11.SQLEndpointList{},
			Managed: &v1alpha11.SQLEndpoint{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.WarehouseID")
	}
	mg.Spec.InitProvider.WarehouseID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.WarehouseIDRef = rsp.ResolvedReference

	return nil
}
